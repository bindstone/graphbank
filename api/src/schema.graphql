########################################################################################
# TYPES
########################################################################################

type File {
    filename: String!
    mimetype: String!
    encoding: String!
}

type Currency {
    id: ID!
    iso: String
    description: String
    exchange: Float
}

type Client {
    id: ID!
    firstName: String
    lastName: String
    currency: Currency @relation(name: "BASED", direction: "BOTH")
}

########################################################################################
# INPUT
########################################################################################

input ClientInput {
    id: ID
    firstName: String!
    lastName: String!
}

########################################################################################
# QUERIES
########################################################################################


########################################################################################
# MUTATIONS
########################################################################################

type Mutation {

    updateUserWithCurrency(client: ClientInput, currencyId: ID!): [Client]
    @cypher(statement:"""
    match (cc:Client{id:$client.id})-[r:BASED]-() delete r
    with cc
    match (cy:Currency{id:$currencyId})
    merge (cl:Client {id:$client.id}) set cl += {firstName:$client.firstName, lastName:$client.lastName}
    merge (cl) -[:BASED]-> (cy) return cl
    """),

    createUserWithCurrency(client: ClientInput, currencyId: ID!): [Client]
    @cypher(statement:"""
    match (cy:Currency{id:$currencyId})
    create (cl:Client {id:apoc.create.uuid(), firstName:$client.firstName, lastName:client.lastName})
    merge (cl) -[:BASED]-> (cy) return cl
    """)

}

